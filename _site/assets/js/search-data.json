{
  "0": {
    "id": "0",
    "title": "Adding a Page to Node.js Apps",
    "content": "This tutorial will guide you on how to add a new page to a node.js website.Creating the pageAdding the headFirst, add the following code to the top of your page:&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&quot;en-US&quot;&amp;gt;  &amp;lt;head&amp;gt;    &amp;lt;%- include('../partials/head.ejs') %&amp;gt;    &amp;lt;title&amp;gt; Title &amp;lt;/title&amp;gt;  &amp;lt;/head&amp;gt;  &amp;lt;body&amp;gt;If you want to add in a stylesheet, favicon, or &amp;lt;meta&amp;gt; tag, you would put it here in between the &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; tags.Referencing PartialsFor information on how to reference a partial, view this tutorial.For information on what the various partials do, view this tutorial.There are three main partial pages to include. The first is the navbar, which usually is the first thing after the &amp;lt;body&amp;gt; tag. You would include it as so:&amp;lt;%- include('../partials/navbar.ejs') %&amp;gt;            Then, there is the loader partial, which includes tools on making a full-screen page loader using [[materializecss’ preloader tool      http://materializecss.com/preloader.html]]. If you want to use the tools, include them as so:      &amp;lt;%- include('../partials/loader.ejs') %&amp;gt;Finally, there is the orientation partial. This partial will force any mobile user to tilt their screen horizontally. To use it, include it as so:&amp;lt;%- include('../partials/orientation.ejs') %&amp;gt;Adding your own codeAdd whatever page content that the page is intended to have. Note that the head include give you access to materializecss and jquery.For information on how to use materializecss, view their website.For information on how to use jquery, view their documentation.In terms of code structure, view our tutorial on front-end coding structure and style.Closing the pageClose the &amp;lt;body&amp;gt; and &amp;lt;html&amp;gt; tags as so:  &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;Adding your page to the navbarIn views/partials/navbar.ejs, in both the ul.side-nav and the main &amp;lt;ul&amp;gt;, add a &amp;lt;li&amp;gt; with an &amp;lt;a&amp;gt; inside it, linking to the page you just made, as so:&amp;lt;nav&amp;gt;  &amp;lt;div class=&quot;nav-wrapper&quot;&amp;gt;      &amp;lt;a href=&quot;/&quot; class=&quot;brand-logo&quot;&amp;gt;HarkerDev&amp;lt;/a&amp;gt;      &amp;lt;a href=&quot;#&quot; data-activates=&quot;mobile-demo&quot; class=&quot;button-collapse&quot;&amp;gt;&amp;lt;i class=&quot;material-icons&quot;&amp;gt;menu&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;      &amp;lt;ul class=&quot;right hide-on-med-and-down&quot;&amp;gt;        &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/page&quot;&amp;gt;Page&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;      &amp;lt;/ul&amp;gt;      &amp;lt;ul class=&quot;side-nav&quot; id=&quot;mobile-demo&quot;&amp;gt;        &amp;lt;li&amp;gt;&amp;lt;a href=&quot;/page&quot;&amp;gt;Page&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;      &amp;lt;/ul&amp;gt;    &amp;lt;/div&amp;gt;&amp;lt;/nav&amp;gt;For more information on the navbar, view the materializecss tutorial on navbars.Adding the page to the backendTo add the page to the backend, add the following code to the main router:router.get('/page', (req, res) =&amp;gt; { res.render('pages/page.ejs') })",
    "url": "http://localhost:4000/docs/docs/front-end/add-page/",
    "relUrl": "/docs/front-end/add-page/"
  },
  "1": {
    "id": "1",
    "title": "Back End Development",
    "content": "Chapter 3Back End DevelopmentThis section of the documentation runs through some of the different implementations of our backend and how to implement it into our various applications.",
    "url": "http://localhost:4000/docs/backend",
    "relUrl": "/backend"
  },
  "2": {
    "id": "2",
    "title": "Contribution",
    "content": "Chapter 1ContributionLearn how to contribute to Harker Development projects.",
    "url": "http://localhost:4000/docs/contribution",
    "relUrl": "/contribution"
  },
  "3": {
    "id": "3",
    "title": "Developing a Project",
    "content": "Creating a HarkerDev project requires more than simply writing the code. This tutorial summarizes the steps to fully creating a official, Harker-recognized HarkerDev project.Phase 1: AuthorizationStep 1: Define Project FunctionOnce the Administration approves the idea of the project, the function of the project must be clearly defined. The idea of a project is different from its defined function. For example, the function of the Course Planner project was streamlining the course planning process. This part is usually defined by the administration.Step 2: Receive Attention from AdministrationThe first step in making a HarkerDev project is catching the attention of the Harker Administration. They might offer a project, or the HarkerDev organization may seek to make a project, but either way, it starts with the Administration. If they do not approve, then every second spent on the project was a waste of time.Step 3: Create and Approve a TeamAssemble a balanced and diverse team of volunteers to work on the project.Step 4: Develop a TimelineGive the administration a rough timeline of how soon you should finish each step. Give yourself a lot of slack; if you miss these deadlines they will not be happy.Phase 2: PlanningStep 1: BrainstormAs a group, detail the project’s design and structure. The more specific you are in this step, the less work you will do later on. However, circumstances often change and the product may differ from the idea given by this step.Step 2: Build Static PrototypeUsing a visual mock-up tool, or simply pencil and paper, design some pages for the project. Again, more detail here helps later, while giving the administration a better idea of the end result.Step 3: Adjust and ModifyShow the design made in Step 2 to the faculty working with you on the project. If they approve, you can move on; otherwise, take what advice they give you and change the design accordingly. Repeat until they approve.Step 4: Assign RolesLoosely assign roles to different team members who will work on this project. They can range from ‘back-end worker’ to ‘front-end worker’ to ‘liaison’. These roles should be non-binding however; for example, a front-end developer could work on the back-end if they know how to.Phase 3: DevelopStep 1: Make a Base ProductUse the other guides in this wiki to set up an initial version of the project. It does not have to be too fancy, just something to build off of.Step 2: Adjust and DetailThere may be circumstances that arise unexpectedly. Adjust your project to adapt to them, as well as generally detailing the project. Make the code tidier, and remember to comment your code. Meet with your team often to discuss progress. If applicable, show updates to the faculty liaison (they sometimes appreciate it).Step 3: Present and ReviewPresent a decent product to the faculty, and have them comment on what they like and do not. Make some tweaks accordingly.Phase 4: ExecuteStep 1: Run Beta TestsSet up a beta test (sized accordingly to the product), allow testers to review product and give advice. After the test ends, adjust accordingly.Step 2: Finalize ProductSometimes, the administration will request that have the developers isolate themselves from the product (preventing them from spying on users). At this stage, ensure that the product can maintain itself (as much as possible) as you may not have the access to quickly fix errors.Step 3: MaintainIf the server goes down, or some error occurs, be prepared to fix it. They may ask that you add features, so make sure to plan them out accordingly.",
    "url": "http://localhost:4000/docs/docs/contribution/creating-mainting-project/",
    "relUrl": "/docs/contribution/creating-mainting-project/"
  },
  "4": {
    "id": "4",
    "title": "Front End Development",
    "content": "Front End DevelopmentThis section of the documentation runs through some of the different practices of our frontend development and how to implement it into our various applications.",
    "url": "http://localhost:4000/docs/frontend",
    "relUrl": "/frontend"
  },
  "5": {
    "id": "5",
    "title": "Front End Development Practices",
    "content": "Placement and External ReferencingFront-end development takes place solely in the views and static folders.ViewsIn views, there should be two subfolders: pages and partials. pages should only store .ejs files that are not going to be included in other pages. partials should only store .ejs files that are going to be reused in files in the pages folder.StaticIn static, there may be many folders, including css, js, img, fonts, and so on. Any non-ejs file that is to be referenced in the ejs files. As should be obvious, stylesheets belong in css, javascript scripts belong in js, images belong in img, and fonts belong in fonts. Any static file should be stored in static. A purely html file that is not dynamic could potentially be stored in static.Any stylesheet or script that will be used multiple times should be stored in these folders. Otherwise, it can be stored within the ejs file itself.Since static should be hosted at /, to access a static file, the src or href should be / + the relative location of the file to the static folder.ReferencesJavaScriptScripts must have a certain order in order to function properly. For example, any javascript that requires jquery must be run after the jquery script has finished. This can be accomplished be either placing the script after the jquery script or by adding a defer attribute.Scripts that are used multiple times (i.e. external scripts) generally should be placed in the &amp;lt;head&amp;gt;, accounting for the order that allows for the scripts to run properly (e.g. placing jquery before Materialize, and then a script that references Materialize after the Materialize script). Scripts that are defined within the file should be placed in the &amp;lt;body&amp;gt;.CSSGenerally, all styling should either be placed in an external stylesheet or within a &amp;lt;style&amp;gt; tag in the &amp;lt;head&amp;gt;. CSS that is specific to that page only should be placed in a &amp;lt;style&amp;gt;, while CSS that may be used in other pages as well should be placed in an external stylesheet (in static). style attributes should not be used; instead, those elements should be given either an id or class which has style defined either in an external stylesheet or &amp;lt;style&amp;gt; tag.EJS IncludesAt HarkerDev, we only use include to include files from views/partials. If you are going to use a medium-to-large sized chunk of HTML multiple times, make a custom partial and include it. If the chunk of HTML is a &amp;lt;style&amp;gt; or &amp;lt;script&amp;gt; tag, do not use includes, but rather an external stylesheet or script.CommentingHTMLIn large chunks of HTML, have a starting tag describing the chunk, and then another comment closing the chunk with the selector, like so:&amp;lt;!-- This does something --&amp;gt;&amp;lt;div class=&quot;.selector&quot;&amp;gt;  &amp;lt;!-- This does another thing --&amp;gt;  &amp;lt;div class=&quot;.something-else&quot;&amp;gt;    &amp;lt;!-- A lotttt of code --&amp;gt;    ...  &amp;lt;/div&amp;gt;&amp;lt;!-- /.something-else --&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;!-- /.selector --&amp;gt;JavaScriptWhen defining variables, please try to make the variable name self-explaining. In addition, leave a comment next to it briefly describing its purpose like so:var interval = 50        // the interval for the setInterval() function used by the countdown timervar isDisplaying = false // whether the page is currently displayingAs shown above, if variables are set in blocks, align the comments for a nicer aesthetic. If your comment uses the word ‘whether’ for a boolean, make sure that the comment aligns with your boolean; if the condition set after the word ‘whether’ is true, your variable should be equal to true. Never say ‘whether or not’.Before functions, add a comment describing the purpose and/or the action of the function right before it. If it is long, add some comments describing different parts of the function:/*  does something  param   - whether to do something  another - number describing something else  returns a float which means something*/function something(param, another) {  // first does a thing  // then another thing  // finally does this  return x}If you got the code off of another website, make sure to link them in the comment:/* https://stackoverflow.com/questions/123456/does-this-really-cool-thing does a really cool thing*/function something() {  // first does a thing  // then another thing  // finally does this}Also, try to comment before calling functions with callback, like so:// after doing x, does yfuncWithCB(function() {  // first does a thing  // then another thing  // finally does this})Unless it is obvious, like the jquery's $(document).ready(callback) function, which can abbreviated to $(callback):$(function() {  // first does a thing  // then another thing  // finally does this})Long explanations are not needed, and functions should be generally self-descriptive. Function names should not be more than 15 characters, and abbreviations can be used as long as comments are added with the full name.Put a single blank line in between blocks of code for easier reading.CSSGenerally, comments should not be used except to separate CSS into different sections. Otherwise, selectors should be completely self descriptive, while using abbreviations (such as btn instead of button). Selectors use hyphens (-) to separate different words (e.g. sm-btn for small button).IndentationIf using Atom as the editor, the Auto Indent feature should handle everything. If a line is too wide (longer than the width of the screen, or 100 characters), then it should be split into multiple lines.AJAX vs. EJS printingEJS allows developers to display information on the front-end from the back-end without using AJAX. You can access other partials by using include. You can insert any information from res.locals or app.locals by using the &amp;lt;%- and &amp;lt;%= tags. For more information on how to use ejs, view their tutorial.Whether to use an AJAX request or use EJS to display information is a decision to be made by the team working on that part of the site (including backend and frontend). Using an AJAX request allows for a more developed REST API, but using EJS is more simple. If a request for information is commonly used throughout pages, making an API route may be the better option. However, if data is specific to the page, and does not change often, using EJS may be better. That being said, the decision requires a strong communication between the back-end and front-end developers.An example of a good time to use EJS is when generating a PDF, or a page designed to be printed. That way, the page is ready to be printed immediately after rendering, rather than having to wait for an AJAX request to finish.An example of a good time to use AJAX is when data is often refreshed, such as a user’s data, or if that data needs to be modified.",
    "url": "http://localhost:4000/docs/docs/front-end/frontend-dev/",
    "relUrl": "/docs/front-end/frontend-dev/"
  },
  "6": {
    "id": "6",
    "title": "GitHub Contributions",
    "content": "GitHubAll of our open-source development is on GitHub, where contricutors can suggest new features, report bugs, and also contribute to our code base. This guide serves as a guideline to interacting with our GitHub organization.ContributionsCommitsEach commit is an important part of the history of the project development. For each commit, make sure that  Commit message begins with a capital letter  Commit message is in past tense  Commit message does not end in a period  Contains a substantial code change (in other words, don’t commit for a typo)Pull RequestsOpen a pull request to one of our repositories if you have made chances to the code base that you believe should be implemented into the production branch. This can be of any sort - bug squashing or feature implementation.If your pull request references an open issue that details a bug report or feature request, make sure to include a Resolves #[issue number] in the body of the pull request, such that if it is merged then the issue will auto-close.Things to include in your pull request:  A clear title of the overview of the changes that were made  In the body, a detailed description of the changes in each file in a bullet format  Resolves keyword as mentioned aboveBug ReportsIf there are bugs in any master branch, please report it by opening an issue in the repository. First make sure that there are no other issues that have been opened for the same bug. Then, in the bug report, include  A clear title that starts with Bug: and describes the bug, with correct capitalization  In the body, Steps taken to produce the issue such that any contributor can reproduce it in their own environmentFeature SuggestionsIf you have an idea for a new feature that may be helpful in any Harker Dev project, feel free to open an issue. Again, make sure that the feature has not been suggested before. In your suggestion, include  A clear title that starts with Feature: and describes the overall functionality of the feature, with correct capitalization  In the body, a detailed description of the feature",
    "url": "http://localhost:4000/docs/docs/contribution/github/",
    "relUrl": "/docs/contribution/github/"
  },
  "7": {
    "id": "7",
    "title": "Home",
    "content": "Harker Development DocsThis is the homepage for the Harker Development Team Documentation. We are responsible for many applications used throughout the student and faculty. For a list of the projects checkout our homepage at https://harkerdev.github.io.Anybody can contribute to our open-source projects. These docs serve as a good starting point to get started and learn more about our stack and how we build our applications.If you have any questions, feel free to reach out to us at dev@harker.org.",
    "url": "http://localhost:4000/docs/",
    "relUrl": "/"
  },
  "8": {
    "id": "8",
    "title": "Access MongoDB with Compass",
    "content": "HarkerDev projects often (if not always) use MongoDB as the main database system. This guide will explain how to use MongoDB’s GUI to access the database directly.Installing MongoDB CompassMongoDB            First, make sure that mongodb is installed and running mongod on the device you wish to connect to. This setup is detailed in our guide on [[Setting Up a Server      https://harkerdev.github.io/backend/setting-up-a-server]].      Compass            Then, [[install MongoDB Compass      https://www.mongodb.com/download-center?filter=enterprise#compass]] on the device you are using to connect.      Using MongoDB CompassOpening MongoDB CompassMongoDB Compass runs as an application on your computer, so once you download it, open it (and move it to the Applications folder if applicable).Connecting to serverUnless specified, most HarkerDev projects run on the default ports. This way, hostname, port, authentication, and replica set name do not have to be specified. To connect to a new server, click ‘New Connection’ on the left side of the interface.Connecting to local serverIf you are connecting to a MongoDB instance running on the same computer as the one accessing it, then no other fields have to be specified. Click ‘Connect’ to start the connection.Connecting to remote serverIf you are connecting to a remote server, under the SSH Tunnel field, select ‘Use Password’. Then, enter the following:  Domain (or IP Address) of the server in the ‘SSH Hostname’ field  Server login username in the ‘SSH Username’ field  Server login password in the ‘SSH Password’ fieldOnce these fields are filled in, click ‘Connect’.For context, the SSH Tunnel first connects into the server through SSH then connects to the MongoDB server locally. This does NOT connect to the MongoDB port but rather the SSH port.Adding to favoritesIf you plan on often connecting to the MongoDB, you can make a favorite so that you do not have to fill in the fields every time you wish to connect to the server. To do this, fill in all the necessary fields but do not click ‘Connect’. In the ‘Favorite Name’ field, fill in the name to refer to the server that you are connecting to. Then, click ‘Create Favorite’.Using the GUIOnce logged in, you have the ability to interface with the databases on the specified server.Connecting to a DatabaseOn the left side, there will be a list of databases that are hosted on the server. Usually on production servers,  only one main database will be used, with a name often similar to the application name (e.g. Course Planner =&amp;gt; courseplanner). To access that database, click on it.Viewing a CollectionUnder the database you are connected to, a list of collections should appear. To begin, click on the name of the collection you wish to manipulate.Filtering a Collection            To filter a collection, use the filter at the top of the GUI. MongoDB has [[their own tutorial      https://docs.mongodb.com/v3.2/tutorial/query-documents/]] on queries, but here are a few examples:      SyntaxTo filter the collection to documents that only have a property with a certain value, enter { &quot;&amp;lt;property&amp;gt;&quot;: &quot;&amp;lt;value&amp;gt;&quot; } into the filter, replacing &amp;lt;property&amp;gt; with the property and &amp;lt;value&amp;gt; with the value. For example, to query documents which have the username property set to 19johnd, use the query:{ &quot;username&quot;: &quot;19johnd&quot; }or QueryTo have a filter which queries documents which EITHER have property1 set to value1 OR property2 set to value2, use the query:{ $or: [  { &quot;property1&quot;: &quot;value1&quot; },   { &quot;property2&quot;: &quot;value2&quot; },]}and QueryTo have a filter which queries documents which BOTH have property1 set to value1 AND property2 set to value2, use the query:{ $and: [  { &quot;property1&quot;: &quot;value1&quot; },   { &quot;property2&quot;: &quot;value2&quot; },]}ObjectId QueryMongoDB’s ObjectId’s are be used to give a unique id to a document. They are usually either the value of the _id field or the value of a field which references other documents. To query documents which have the _id property set to ObjectId(“5b1d”), use the query:{ &quot;_id&quot;: { $oid: &quot;5b1d&quot; } }Manipulating a documentOnce documents are filtered, you can hover over a document for options (in the top right corner of the document). Compass allows you to edit the document (pencil icon) duplicate the document (multiple windows icon) or delete the document (trash bin icon).Editing a fieldsWhen editing a document, Compass allows allows you to modify fields. When hovering over a field, you can click on the value to allow you to edit that field.Adding/removing fieldsTo delete a field, click the ‘x’ icon on the left side of the row. To add a field, click on the ‘+’ icon on the left side of any row to add a field after it.More informationFor more information, visit MongoDB’s official Compass tutorial.",
    "url": "http://localhost:4000/docs/docs/back-end/mongodb-access-with-compass/",
    "relUrl": "/docs/back-end/mongodb-access-with-compass/"
  },
  "9": {
    "id": "9",
    "title": "MongoDB Backup",
    "content": "The more backups there are, the better. Thankfully, because of GitHub, we have multiple backups of the code in addition to the code on the server and on our own computers. However, MongoDB needs more work to set up for backups. This tutorial will guide you on how to make a backup procedure for MongoDB.Local BackupA local backup is helpful because data can become corrupted or maliciously manipulated while in production. A local backup is a great tool for fixing this because the database can be restored from the local backup. However, this does not protect against total hard drive failure.Creating a Backup ScriptIn your home folder, create a script titled backup by entering the following command:nano backupAfter creating the file, append the following commands to it (replace &amp;lt;database&amp;gt; with the database you are using):NOW=$(date +%Y-%m-%d_%H:%M:%S)mongodump -d &amp;lt;database&amp;gt; -o ~/backups/$NOW.mdbThen save the file (if using nano press control+x). Then, in your shell, give yourself permission to run it:sudo chmod 500 ~/backupTo execute the script, run the following command:~/backupScheduling Periodic Script ExecutionAlthough the backup script can be run manually, it would be more efficient for the script to run automatically. To schedule a periodic execution of the script, first run the following command:crontab -eThen scroll your cursor to the bottom of the file. Add a new line after the comments (comments start with #). Once you add the line, save the file by pressing control+x. Different periods are defined below, but you can also read this in-depth guide on crontab.Daily ExecutionTo add a daily execution at midnight, add the following line to the file (replace &amp;lt;userfolder&amp;gt; with your username):0 0 * * * /home/&amp;lt;userfolder&amp;gt;/backupWeekly ExecutionTo add a weekly execution on Sunday at midnight, add the following line to the file (replace &amp;lt;userfolder&amp;gt; with your username):0 0 * * 0 /home/&amp;lt;userfolder&amp;gt;/backup",
    "url": "http://localhost:4000/docs/docs/back-end/mongodb-backup/",
    "relUrl": "/docs/back-end/mongodb-backup/"
  },
  "10": {
    "id": "10",
    "title": "Referencing a Partial Page",
    "content": "To reference the partial page views/partials/some-partial.ejs from a page in views/pages in ejs, use the include function as so:&amp;lt;p&amp;gt; Here is some HTML &amp;lt;/p&amp;gt;&amp;lt;%- include('../partials/some-partial.ejs') %&amp;gt;&amp;lt;p&amp;gt; Here is some HTML &amp;lt;/p&amp;gt;This will replace &amp;lt;%- include('../partials/some-partial.ejs') %&amp;gt; with whatever code is in views/partials/some-partial.ejs.For more information on working with ejs, click here.For information on what the various distributed partials do, view this tutorial.",
    "url": "http://localhost:4000/docs/docs/front-end/reference-partial-page/",
    "relUrl": "/docs/front-end/reference-partial-page/"
  },
  "11": {
    "id": "11",
    "title": "Setting Up A Server",
    "content": "You’ll be writing code for two different environments: development and production. The production environment is the server. The stuff on it should be free of errors, and ideally you don’t want to be testing anything in production. The development environment is what you run on your machine. You should ideally test your changes in your development environment before deploying them to production.DevelopmentBecause you’ll be the only one testing the application locally on your computer (or maybe somehow you could involve a few others), it is enough to only utilize one core of your machine and not worry about the application’s response to load. For that reason, getting things set up locally doesn’t involve too much.Installation1. GitIn order to clone the repository you’ll need Git installed. There are a million guides (maybe not quite a million, but a good amount) on the internet on how to do this. Here is one such guide. If you’re on Windows, want to use the command line, want to clone over https, and want to use Two Factor Authentication for GitHub you’ll also want to use Microsoft’s Git Credential Manger for Windows. Oh yeah and if you don’t want to use git’s command line client (which is very powerful), there are various GUIs built for it, one such being GitHub Desktop.2. Node.jsIn order to run the code you’ll need Node.js (assuming we’re using that as the programming language). Different projects will have different minimum versions depending on how long ago they were coded. If you don’t know what version you’ll need, consult with whoever set up the server for the project and see what version is on the server.There are different ways of handling multiple Node.js versions. One such way is to install n, an application for managing these different versions. Unfortunately this is not supported on Windows. However, given that Node.js is mostly backwards-compatible, you may be able to get by with installing the latest version. Just be aware of new features not available in the version being used for the project.3. MongoDBMost of our projects use MongoDB as a database. You can get that from here.Running      Open Terminal. If on macOS, and enter the command mongod in a new Terminal window. If on Linux, enter the command sudo service mongod start. If on Windows, first create a new folder called data with a folder inside called db on your local disk (usually the C drive). Then run mongod.exe to launch the database. You can do this by opening command prompt and entering the path to the executable (by default it is &quot;C: Program Files MongoDB Server 3.4 bin mongod.exe&quot;).        In Terminal (If using macOS, open a new Terminal window), open the repository’s directory, and enter the command node index.js, and press the control and C keys at the same time to stop it. To have the program run detached from the terminal (so it continues running after you exit the Terminal window), enter the command nohup node index.js. If on Windows, open command prompt, navigate to the repository’s directory, and enter the command node index.js. Press the control and Cat the same time to stop it.        Open http://localhost:&amp;lt;port&amp;gt; in your browser, where &amp;lt;port&amp;gt; is the port specified in your config file.  ProductionInstallingIn the production environment since performance matters we use more software to help handle the load of many students accessing an application at once. This will be discussed below.      Node.js    We use Ubuntu as the OS. Node.js has a guide for installing Node.js on Ubuntu here.        Nginx    Nginx is a web server that can serve static content as well as act as a proxy. It is much more efficient than doing anything in Node.js, therefore we use it to serve the static content for the site, manage TLS, as well as proxy the Node.js code. For most software installation on the Development server, DigitalOcean always has very good guides. They happen to publish ones on installing Nginx, so to find the one relevant to your Ubuntu version search for something like “nginx install ubuntu” and find the relevant link. For example here is the one for 16.04. Now for this guide because Harker has its own firewall and we don’t host with DigitalOcean you can ignore the part with ufw. Pretty much all you need to do as of writing is sudo apt-get update and sudo apt-get install nginx.        pm2    Another thing that makes the application more performant in production is utilizing multiple cores. Node.js has ways to do this an the application, but pm2 makes this much easier and in facts prevents you from having to write any code for utilizing multiple cores. It also handle auto-restarting the application if there are any errors and saving log files. To install it follow the instructions here.        Certbot    To prevent having to wait for Harker to give us SSL certificates, we use the Let’s Encrypt service. In order to use it, we’ll need an application for registering with said service. Again, DigitalOcean has a nice guide for this. As said before their guides are Ubuntu-version specific, but here’s the one for 16.04. You can skip the parts about setting up nginx and updating ufw. When you get to running the certbot commands, you’ll need to have set up nginx and disabled https redirection (as we won’t have a certificate yet). Make sure to complete the part titled “Updating Diffie-Hellman Parameters”, but don’t edit the config as that will already be handled. You’ll also want to set up auto-renewal (which is covered in the guide).        MongoDB    You can refer to MongoDB’s guide for this.  SetupNginx has two different directories for configuration: /etc/nginx/sites-available/ and /etc/nginx/sites-enabled/. The configuration files are stored in sites-available, and they are symlinked (use ln -s) to sites-enabled. Grab a previous config file from sites-available (it’s name will match the DNS name of the site), and put that in the same folder on the new server but with the appropriate name. You’ll also want to copy over the files in /etc/nginx/snippets.Then delete the default site symlink in /etc/nginx/sites-available/ and symlink the new file in site-available to sites-enabled. You’ll then want to edit the new file in sites-available, updating paths as well as names. You’ll also want to disable HTTPS redirection before setting up Let’s Encrypt (but remember to turn it back on).You’ll also need to clone the repo into the home folder. You’ll need to set up SSH Forwarding for this and to clone the repo over SSH.RunningUse sudo service mongod start to start MongoDb, and pm2 start app.js -i 0 --name &quot;app&quot; (assuming app.js is the main file and you’re in the directory you cloned) to start the main application for the first time. Later you can just use pm2 start app.Backups            Consider viewing [[this tutorial      https://github.com/DJMcoder/HarkerDevGuides/wiki/Creating-Backup-Procedures]] for an in-depth guide on creating a backup procedure.      ",
    "url": "http://localhost:4000/docs/docs/back-end/setting-up-a-server/",
    "relUrl": "/docs/back-end/setting-up-a-server/"
  },
  "12": {
    "id": "12",
    "title": "Populate Database w/ Test Files",
    "content": "Testing often requires a populated database to work with. This tutorial explains how to write a write scripts which populate the database with test documents specified in files you will create.SetupMake sure that MongoDB is set up and mongod is running. Review the structure of your collections. For this tutorial, we will be using users as our example, with the following schema:const mongoose = require('../db');// Format of the mongoDB collectionconst userSchema = mongoose.Schema({  fullName: {    type: String,    required: true,  },  username: {    type: String,    required: true,    index: {      unique: true,    },  },});// Creating the mongoose modelconst User = mongoose.model('User', userSchema);module.exports = User;Creating DB Test filesIn your repository folder, create a new folder titled DatabaseTestFiles. In this folder, create a new file called UserTest.json. Line by line, create a new instance of a user. Here is an example:{&quot;fullName&quot;:&quot;John Doe&quot;,&quot;username&quot;:&quot;19johnd&quot;}{&quot;fullName&quot;:&quot;Mary Molly&quot;,&quot;username&quot;:&quot;17marym&quot;}Note the lack of commas between objects.A Note on ImplementationWe are only using a model with two String fields. More models and fields could be added in the same fashion. If a reference field is added, there are two possibilities that could be implemented. The first would be to generate the ids in the database test files, and then reference those ids them in the other document. The other would be to generate documents for both collections separately, then randomly pair them together (depending on the direction of the reference).Creating scriptsIf it does not already exist, add a folder to your repository folder titled scripts.Unpopulate scriptIn your scripts folder, add a file titled unpopulate.js.Add the following require block to the beginning of your code:const fs = require('fs');const readline = require('readline');const mongoose = require('../db');const User = require('../models/user');If you were to add another model to the populate script, you would add its require reference here.Then, add the parseUsers function.function parseUsers() {  return new Promise((resolve, reject) =&amp;gt; {    const mongoTransactions = [];    const userRl = readline.createInterface({      input: fs.createReadStream(`${__dirname}/../DatabaseTestFiles/UserTest.json`),    });    userRl.on('line', (data) =&amp;gt; {      mongoTransactions.push(        User.findOne(JSON.parse(data))          .then((user) =&amp;gt; {            if (!user) throw new Error(`User ith username ${JSON.parse(data).username} does not exist`);            return user;          })          .then(user =&amp;gt; user.remove())          .then(() =&amp;gt; console.log(`Removed user with username ${JSON.parse(data).username}`))          .catch((err) =&amp;gt; {            console.log(`Error removing user from database: ${err}`);          })      );    });    userRl.on('close', () =&amp;gt; {      Promise.all(mongoTransactions)        .then(resolve)        .catch(reject);    });  });}If you wanted to reference another model in User, for example ‘Groceries’, you would make a new, similar function but called deleteGroceriesOfUsers and which would take the parameter user and delete all of the groceries that that user referenced. Then, directly after this code block:.then((user) =&amp;gt; {  if (!user) throw new Error(`User ith username ${JSON.parse(data).username} does not exist`);  return user;})Add another .then() statement as so:.then(user =&amp;gt; { deleteGroceriesOfUser(user) })Finally, at the end of the script, add this execution statement:if (module.parent) {  module.exports = parseUsers();} else {  parseUsers().then(mongoose.disconnect);}This checks to see if this code is being run by another script, which will be important for the populate.js script.Populate scriptIn your scripts folder, add a file titled populate.js. Add the following require block to the beginning of your code:const fs = require('fs');const readline = require('readline');const mongoose = require('../db');const User = require('../models/user');If you were to add another model to the populate script, you would add its require reference here. Then, add the parseUsers function:function parseUsers() {  const mongoTransactions = [];  const users = [];  const userRl = readline.createInterface({    input: fs.createReadStream(`${__dirname}/../DatabaseTestFiles/UserTest.json`),  });  userRl.on('line', (data) =&amp;gt; {    const user = new User(JSON.parse(data));    mongoTransactions.push(      user.save().then((doc) =&amp;gt; {        users.push(doc);      }).then(() =&amp;gt; console.log(`Created user with username ${JSON.parse(data).username}`))      .catch((err) =&amp;gt; {        console.log(`Error saving user to database: ${err}`);      })    );  });}This function goes line-by-line through the database test file and creates a new document for each.If you wanted to reference another model in User, for example ‘Groceries’, you would make a new, similar function but called parseGroceries and which would take the parameter users. Then, append the following code inside of the parseUsers function:userRl.on('close', () =&amp;gt; {  Promise.all(mongoTransactions).then(users =&amp;gt; {    parseGroceries(users);  });});Finally, at the end of your code, add this statement:require('./unpopulate').then(parseUsers);This makes sure that the database is depopulated before repopulating it.",
    "url": "http://localhost:4000/docs/docs/back-end/test-files-database/",
    "relUrl": "/docs/back-end/test-files-database/"
  }
}
